{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPtJjFcAidkW7auCSdh3evK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sakki221/Assingments/blob/main/Aiplanet%20codesubmission\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SqLS-ygaqJ7B"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "train_df = pd.read_csv('Train_Data.csv')\n",
        "test_df = pd.read_csv('Test_Data.csv')\n",
        "sample_submission_df = pd.read_csv('Sample_Submission.csv')\n",
        "\n",
        "train_df.dropna(subset=['age_group'], inplace=True)\n",
        "\n",
        "if train_df['age_group'].dtype == 'object':\n",
        "    train_df['age_group'] = train_df['age_group'].map({'Adult': 0, 'Senior': 1})\n",
        "    if train_df['age_group'].isnull().any():\n",
        "        train_df.dropna(subset=['age_group'], inplace=True)\n",
        "\n",
        "train_df['BMXBMI_squared'] = train_df['BMXBMI']**2\n",
        "test_df['BMXBMI_squared'] = test_df['BMXBMI']**2\n",
        "\n",
        "epsilon = 1e-6\n",
        "train_df['Glucose_Insulin_Ratio'] = train_df['LBXGLU'] / (train_df['LBXIN'] + epsilon)\n",
        "test_df['Glucose_Insulin_Ratio'] = test_df['LBXGLU'] / (test_df['LBXIN'] + epsilon)\n",
        "\n",
        "train_df['DIQ010_LBXGLU_Interaction'] = train_df['DIQ010'] * train_df['LBXGLU']\n",
        "test_df['DIQ010_LBXGLU_Interaction'] = test_df['DIQ010'] * test_df['LBXGLU']\n",
        "\n",
        "train_df['Gender_BMI_Interaction'] = train_df['RIAGENDR'] * train_df['BMXBMI']\n",
        "test_df['Gender_BMI_Interaction'] = test_df['RIAGENDR'] * test_df['BMXBMI']\n",
        "\n",
        "all_numerical_cols_train = train_df.select_dtypes(include=['number']).columns.tolist()\n",
        "all_numerical_cols_test = test_df.select_dtypes(include=['number']).columns.tolist()\n",
        "\n",
        "if 'SEQN' in all_numerical_cols_train:\n",
        "    all_numerical_cols_train.remove('SEQN')\n",
        "if 'age_group' in all_numerical_cols_train:\n",
        "    all_numerical_cols_train.remove('age_group')\n",
        "\n",
        "features_to_impute_test = [col for col in all_numerical_cols_test if col != 'SEQN']\n",
        "\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "train_df[all_numerical_cols_train] = imputer.fit_transform(train_df[all_numerical_cols_train])\n",
        "test_df[features_to_impute_test] = imputer.transform(test_df[features_to_impute_test])\n",
        "\n",
        "features = [col for col in train_df.columns if col not in ['SEQN', 'age_group']]\n",
        "X_train = train_df[features]\n",
        "y_train = train_df['age_group']\n",
        "X_test = test_df[features]\n",
        "\n",
        "missing_in_test = set(X_train.columns) - set(X_test.columns)\n",
        "for col in missing_in_test:\n",
        "    X_test[col] = 0\n",
        "\n",
        "X_test = X_test[X_train.columns]\n",
        "\n",
        "model = RandomForestClassifier(random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "predictions = model.predict(X_test)\n",
        "\n",
        "submission_df = pd.DataFrame({'SEQN': test_df['SEQN'], 'age_group': predictions})\n",
        "submission_df['age_group'] = submission_df['age_group'].astype(int)\n",
        "submission_df.to_csv('submission.csv', index=False)\n"
      ]
    }
  ]
}